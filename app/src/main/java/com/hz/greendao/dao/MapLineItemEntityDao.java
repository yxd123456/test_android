package com.hz.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.hz.greendao.dao.MapLineItemEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAP_LINE_ITEM_ENTITY".
*/
public class MapLineItemEntityDao extends AbstractDao<MapLineItemEntity, String> {

    public static final String TABLENAME = "MAP_LINE_ITEM_ENTITY";

    /**
     * Properties of entity MapLineItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LineItemId = new Property(0, String.class, "lineItemId", true, "LINE_ITEM_ID");
        public final static Property LineItemModeId = new Property(1, String.class, "lineItemModeId", false, "LINE_ITEM_MODE_ID");
        public final static Property LineItemWireType = new Property(2, int.class, "lineItemWireType", false, "LINE_ITEM_WIRE_TYPE");
        public final static Property LineItemNum = new Property(3, int.class, "lineItemNum", false, "LINE_ITEM_NUM");
        public final static Property LineItemStatus = new Property(4, int.class, "lineItemStatus", false, "LINE_ITEM_STATUS");
        public final static Property LineItemRemoved = new Property(5, int.class, "lineItemRemoved", false, "LINE_ITEM_REMOVED");
        public final static Property LineItemLineId = new Property(6, String.class, "LineItemLineId", false, "LINE_ITEM_LINE_ID");
    };

    private Query<MapLineItemEntity> mapLineEntity_MapLineItemEntityListQuery;

    public MapLineItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MapLineItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAP_LINE_ITEM_ENTITY\" (" + //
                "\"LINE_ITEM_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: lineItemId
                "\"LINE_ITEM_MODE_ID\" TEXT," + // 1: lineItemModeId
                "\"LINE_ITEM_WIRE_TYPE\" INTEGER NOT NULL ," + // 2: lineItemWireType
                "\"LINE_ITEM_NUM\" INTEGER NOT NULL ," + // 3: lineItemNum
                "\"LINE_ITEM_STATUS\" INTEGER NOT NULL ," + // 4: lineItemStatus
                "\"LINE_ITEM_REMOVED\" INTEGER NOT NULL ," + // 5: lineItemRemoved
                "\"LINE_ITEM_LINE_ID\" TEXT NOT NULL );"); // 6: LineItemLineId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ITEM_ENTITY_LINE_ITEM_ID ON MAP_LINE_ITEM_ENTITY" +
                " (\"LINE_ITEM_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ITEM_ENTITY_LINE_ITEM_MODE_ID ON MAP_LINE_ITEM_ENTITY" +
                " (\"LINE_ITEM_MODE_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ITEM_ENTITY_LINE_ITEM_WIRE_TYPE ON MAP_LINE_ITEM_ENTITY" +
                " (\"LINE_ITEM_WIRE_TYPE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ITEM_ENTITY_LINE_ITEM_NUM ON MAP_LINE_ITEM_ENTITY" +
                " (\"LINE_ITEM_NUM\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ITEM_ENTITY_LINE_ITEM_STATUS ON MAP_LINE_ITEM_ENTITY" +
                " (\"LINE_ITEM_STATUS\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ITEM_ENTITY_LINE_ITEM_REMOVED ON MAP_LINE_ITEM_ENTITY" +
                " (\"LINE_ITEM_REMOVED\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ITEM_ENTITY_LINE_ITEM_LINE_ID ON MAP_LINE_ITEM_ENTITY" +
                " (\"LINE_ITEM_LINE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAP_LINE_ITEM_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MapLineItemEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getLineItemId());
 
        String lineItemModeId = entity.getLineItemModeId();
        if (lineItemModeId != null) {
            stmt.bindString(2, lineItemModeId);
        }
        stmt.bindLong(3, entity.getLineItemWireType());
        stmt.bindLong(4, entity.getLineItemNum());
        stmt.bindLong(5, entity.getLineItemStatus());
        stmt.bindLong(6, entity.getLineItemRemoved());
        stmt.bindString(7, entity.getLineItemLineId());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MapLineItemEntity readEntity(Cursor cursor, int offset) {
        MapLineItemEntity entity = new MapLineItemEntity( //
            cursor.getString(offset + 0), // lineItemId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lineItemModeId
            cursor.getInt(offset + 2), // lineItemWireType
            cursor.getInt(offset + 3), // lineItemNum
            cursor.getInt(offset + 4), // lineItemStatus
            cursor.getInt(offset + 5), // lineItemRemoved
            cursor.getString(offset + 6) // LineItemLineId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MapLineItemEntity entity, int offset) {
        entity.setLineItemId(cursor.getString(offset + 0));
        entity.setLineItemModeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLineItemWireType(cursor.getInt(offset + 2));
        entity.setLineItemNum(cursor.getInt(offset + 3));
        entity.setLineItemStatus(cursor.getInt(offset + 4));
        entity.setLineItemRemoved(cursor.getInt(offset + 5));
        entity.setLineItemLineId(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MapLineItemEntity entity, long rowId) {
        return entity.getLineItemId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MapLineItemEntity entity) {
        if(entity != null) {
            return entity.getLineItemId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mapLineItemEntityList" to-many relationship of MapLineEntity. */
    public List<MapLineItemEntity> _queryMapLineEntity_MapLineItemEntityList(String LineItemLineId) {
        synchronized (this) {
            if (mapLineEntity_MapLineItemEntityListQuery == null) {
                QueryBuilder<MapLineItemEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LineItemLineId.eq(null));
                mapLineEntity_MapLineItemEntityListQuery = queryBuilder.build();
            }
        }
        Query<MapLineItemEntity> query = mapLineEntity_MapLineItemEntityListQuery.forCurrentThread();
        query.setParameter(0, LineItemLineId);
        return query.list();
    }

}
