package com.hz.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hz.greendao.dao.MapLineEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAP_LINE_ENTITY".
*/
public class MapLineEntityDao extends AbstractDao<MapLineEntity, String> {

    public static final String TABLENAME = "MAP_LINE_ENTITY";

    /**
     * Properties of entity MapLineEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LineId = new Property(0, String.class, "lineId", true, "LINE_ID");
        public final static Property LineProjId = new Property(1, long.class, "lineProjId", false, "LINE_PROJ_ID");
        public final static Property LineUserId = new Property(2, long.class, "lineUserId", false, "LINE_USER_ID");
        public final static Property LineEditType = new Property(3, int.class, "lineEditType", false, "LINE_EDIT_TYPE");
        public final static Property LineType = new Property(4, int.class, "lineType", false, "LINE_TYPE");
        public final static Property LineName = new Property(5, String.class, "lineName", false, "LINE_NAME");
        public final static Property LineNote = new Property(6, String.class, "lineNote", false, "LINE_NOTE");
        public final static Property LineRemoved = new Property(7, int.class, "lineRemoved", false, "LINE_REMOVED");
        public final static Property LineNeedToUpload = new Property(8, boolean.class, "lineNeedToUpload", false, "LINE_NEED_TO_UPLOAD");
        public final static Property LineStartLatitude = new Property(9, double.class, "lineStartLatitude", false, "LINE_START_LATITUDE");
        public final static Property LineStartLongitude = new Property(10, double.class, "lineStartLongitude", false, "LINE_START_LONGITUDE");
        public final static Property LineEndLatitude = new Property(11, double.class, "lineEndLatitude", false, "LINE_END_LATITUDE");
        public final static Property LineEndLongitude = new Property(12, double.class, "lineEndLongitude", false, "LINE_END_LONGITUDE");
        public final static Property LineWireTypeId = new Property(13, String.class, "lineWireTypeId", false, "LINE_WIRE_TYPE_ID");
        public final static Property LineStartPointId = new Property(14, String.class, "lineStartPointId", false, "LINE_START_POINT_ID");
        public final static Property LineEndPointId = new Property(15, String.class, "lineEndPointId", false, "LINE_END_POINT_ID");
        public final static Property LineStartPointName = new Property(16, String.class, "lineStartPointName", false, "LINE_START_POINT_NAME");
        public final static Property LineEndPointName = new Property(17, String.class, "lineEndPointName", false, "LINE_END_POINT_NAME");
        public final static Property LineLength = new Property(18, Double.class, "lineLength", false, "LINE_LENGTH");
        public final static Property LineSpecificationNumber = new Property(19, int.class, "lineSpecificationNumber", false, "LINE_SPECIFICATION_NUMBER");
    };

    private DaoSession daoSession;


    public MapLineEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MapLineEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAP_LINE_ENTITY\" (" + //
                "\"LINE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: lineId
                "\"LINE_PROJ_ID\" INTEGER NOT NULL ," + // 1: lineProjId
                "\"LINE_USER_ID\" INTEGER NOT NULL ," + // 2: lineUserId
                "\"LINE_EDIT_TYPE\" INTEGER NOT NULL ," + // 3: lineEditType
                "\"LINE_TYPE\" INTEGER NOT NULL ," + // 4: lineType
                "\"LINE_NAME\" TEXT," + // 5: lineName
                "\"LINE_NOTE\" TEXT," + // 6: lineNote
                "\"LINE_REMOVED\" INTEGER NOT NULL ," + // 7: lineRemoved
                "\"LINE_NEED_TO_UPLOAD\" INTEGER NOT NULL ," + // 8: lineNeedToUpload
                "\"LINE_START_LATITUDE\" REAL NOT NULL ," + // 9: lineStartLatitude
                "\"LINE_START_LONGITUDE\" REAL NOT NULL ," + // 10: lineStartLongitude
                "\"LINE_END_LATITUDE\" REAL NOT NULL ," + // 11: lineEndLatitude
                "\"LINE_END_LONGITUDE\" REAL NOT NULL ," + // 12: lineEndLongitude
                "\"LINE_WIRE_TYPE_ID\" TEXT," + // 13: lineWireTypeId
                "\"LINE_START_POINT_ID\" TEXT," + // 14: lineStartPointId
                "\"LINE_END_POINT_ID\" TEXT," + // 15: lineEndPointId
                "\"LINE_START_POINT_NAME\" TEXT," + // 16: lineStartPointName
                "\"LINE_END_POINT_NAME\" TEXT," + // 17: lineEndPointName
                "\"LINE_LENGTH\" REAL," + // 18: lineLength
                "\"LINE_SPECIFICATION_NUMBER\" INTEGER NOT NULL );"); // 19: lineSpecificationNumber
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_ID ON MAP_LINE_ENTITY" +
                " (\"LINE_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_PROJ_ID ON MAP_LINE_ENTITY" +
                " (\"LINE_PROJ_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_USER_ID ON MAP_LINE_ENTITY" +
                " (\"LINE_USER_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_EDIT_TYPE ON MAP_LINE_ENTITY" +
                " (\"LINE_EDIT_TYPE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_TYPE ON MAP_LINE_ENTITY" +
                " (\"LINE_TYPE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_REMOVED ON MAP_LINE_ENTITY" +
                " (\"LINE_REMOVED\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_NEED_TO_UPLOAD ON MAP_LINE_ENTITY" +
                " (\"LINE_NEED_TO_UPLOAD\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_START_LATITUDE ON MAP_LINE_ENTITY" +
                " (\"LINE_START_LATITUDE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_START_LONGITUDE ON MAP_LINE_ENTITY" +
                " (\"LINE_START_LONGITUDE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_END_LATITUDE ON MAP_LINE_ENTITY" +
                " (\"LINE_END_LATITUDE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_END_LONGITUDE ON MAP_LINE_ENTITY" +
                " (\"LINE_END_LONGITUDE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MAP_LINE_ENTITY_LINE_SPECIFICATION_NUMBER ON MAP_LINE_ENTITY" +
                " (\"LINE_SPECIFICATION_NUMBER\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAP_LINE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MapLineEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getLineId());
        stmt.bindLong(2, entity.getLineProjId());
        stmt.bindLong(3, entity.getLineUserId());
        stmt.bindLong(4, entity.getLineEditType());
        stmt.bindLong(5, entity.getLineType());
 
        String lineName = entity.getLineName();
        if (lineName != null) {
            stmt.bindString(6, lineName);
        }
 
        String lineNote = entity.getLineNote();
        if (lineNote != null) {
            stmt.bindString(7, lineNote);
        }
        stmt.bindLong(8, entity.getLineRemoved());
        stmt.bindLong(9, entity.getLineNeedToUpload() ? 1L: 0L);
        stmt.bindDouble(10, entity.getLineStartLatitude());
        stmt.bindDouble(11, entity.getLineStartLongitude());
        stmt.bindDouble(12, entity.getLineEndLatitude());
        stmt.bindDouble(13, entity.getLineEndLongitude());
 
        String lineWireTypeId = entity.getLineWireTypeId();
        if (lineWireTypeId != null) {
            stmt.bindString(14, lineWireTypeId);
        }
 
        String lineStartPointId = entity.getLineStartPointId();
        if (lineStartPointId != null) {
            stmt.bindString(15, lineStartPointId);
        }
 
        String lineEndPointId = entity.getLineEndPointId();
        if (lineEndPointId != null) {
            stmt.bindString(16, lineEndPointId);
        }
 
        String lineStartPointName = entity.getLineStartPointName();
        if (lineStartPointName != null) {
            stmt.bindString(17, lineStartPointName);
        }
 
        String lineEndPointName = entity.getLineEndPointName();
        if (lineEndPointName != null) {
            stmt.bindString(18, lineEndPointName);
        }
 
        Double lineLength = entity.getLineLength();
        if (lineLength != null) {
            stmt.bindDouble(19, lineLength);
        }
        stmt.bindLong(20, entity.getLineSpecificationNumber());
    }

    @Override
    protected void attachEntity(MapLineEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MapLineEntity readEntity(Cursor cursor, int offset) {
        MapLineEntity entity = new MapLineEntity( //
            cursor.getString(offset + 0), // lineId
            cursor.getLong(offset + 1), // lineProjId
            cursor.getLong(offset + 2), // lineUserId
            cursor.getInt(offset + 3), // lineEditType
            cursor.getInt(offset + 4), // lineType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lineName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lineNote
            cursor.getInt(offset + 7), // lineRemoved
            cursor.getShort(offset + 8) != 0, // lineNeedToUpload
            cursor.getDouble(offset + 9), // lineStartLatitude
            cursor.getDouble(offset + 10), // lineStartLongitude
            cursor.getDouble(offset + 11), // lineEndLatitude
            cursor.getDouble(offset + 12), // lineEndLongitude
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // lineWireTypeId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // lineStartPointId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // lineEndPointId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // lineStartPointName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // lineEndPointName
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // lineLength
            cursor.getInt(offset + 19) // lineSpecificationNumber
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MapLineEntity entity, int offset) {
        entity.setLineId(cursor.getString(offset + 0));
        entity.setLineProjId(cursor.getLong(offset + 1));
        entity.setLineUserId(cursor.getLong(offset + 2));
        entity.setLineEditType(cursor.getInt(offset + 3));
        entity.setLineType(cursor.getInt(offset + 4));
        entity.setLineName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLineNote(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLineRemoved(cursor.getInt(offset + 7));
        entity.setLineNeedToUpload(cursor.getShort(offset + 8) != 0);
        entity.setLineStartLatitude(cursor.getDouble(offset + 9));
        entity.setLineStartLongitude(cursor.getDouble(offset + 10));
        entity.setLineEndLatitude(cursor.getDouble(offset + 11));
        entity.setLineEndLongitude(cursor.getDouble(offset + 12));
        entity.setLineWireTypeId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLineStartPointId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLineEndPointId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLineStartPointName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLineEndPointName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLineLength(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setLineSpecificationNumber(cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MapLineEntity entity, long rowId) {
        return entity.getLineId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MapLineEntity entity) {
        if(entity != null) {
            return entity.getLineId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
