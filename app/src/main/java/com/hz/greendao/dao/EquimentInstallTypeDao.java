package com.hz.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hz.greendao.dao.EquimentInstallType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EQUIMENT_INSTALL_TYPE".
*/
public class EquimentInstallTypeDao extends AbstractDao<EquimentInstallType, Long> {

    public static final String TABLENAME = "EQUIMENT_INSTALL_TYPE";

    /**
     * Properties of entity EquimentInstallType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property BarNameEn = new Property(1, String.class, "barNameEn", false, "BAR_NAME_EN");
        public final static Property TowerMaterialType = new Property(2, String.class, "towerMaterialType", false, "TOWER_MATERIAL_TYPE");
        public final static Property Scbz = new Property(3, String.class, "scbz", false, "SCBZ");
        public final static Property Cjsj = new Property(4, java.util.Date.class, "cjsj", false, "CJSJ");
        public final static Property UpdateDate = new Property(5, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
        public final static Property VoltageType = new Property(6, Integer.class, "voltageType", false, "VOLTAGE_TYPE");
        public final static Property TerrainId = new Property(7, Integer.class, "terrainId", false, "TERRAIN_ID");
        public final static Property BelongId = new Property(8, Integer.class, "belongId", false, "BELONG_ID");
    };


    public EquimentInstallTypeDao(DaoConfig config) {
        super(config);
    }
    
    public EquimentInstallTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EQUIMENT_INSTALL_TYPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"BAR_NAME_EN\" TEXT," + // 1: barNameEn
                "\"TOWER_MATERIAL_TYPE\" TEXT," + // 2: towerMaterialType
                "\"SCBZ\" TEXT," + // 3: scbz
                "\"CJSJ\" INTEGER," + // 4: cjsj
                "\"UPDATE_DATE\" INTEGER," + // 5: updateDate
                "\"VOLTAGE_TYPE\" INTEGER," + // 6: voltageType
                "\"TERRAIN_ID\" INTEGER," + // 7: terrainId
                "\"BELONG_ID\" INTEGER);"); // 8: belongId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_EQUIMENT_INSTALL_TYPE__id ON EQUIMENT_INSTALL_TYPE" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EQUIMENT_INSTALL_TYPE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EquimentInstallType entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String barNameEn = entity.getBarNameEn();
        if (barNameEn != null) {
            stmt.bindString(2, barNameEn);
        }
 
        String towerMaterialType = entity.getTowerMaterialType();
        if (towerMaterialType != null) {
            stmt.bindString(3, towerMaterialType);
        }
 
        String scbz = entity.getScbz();
        if (scbz != null) {
            stmt.bindString(4, scbz);
        }
 
        java.util.Date cjsj = entity.getCjsj();
        if (cjsj != null) {
            stmt.bindLong(5, cjsj.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(6, updateDate.getTime());
        }
 
        Integer voltageType = entity.getVoltageType();
        if (voltageType != null) {
            stmt.bindLong(7, voltageType);
        }
 
        Integer terrainId = entity.getTerrainId();
        if (terrainId != null) {
            stmt.bindLong(8, terrainId);
        }
 
        Integer belongId = entity.getBelongId();
        if (belongId != null) {
            stmt.bindLong(9, belongId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EquimentInstallType readEntity(Cursor cursor, int offset) {
        EquimentInstallType entity = new EquimentInstallType( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barNameEn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // towerMaterialType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // scbz
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // cjsj
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // updateDate
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // voltageType
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // terrainId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // belongId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EquimentInstallType entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBarNameEn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTowerMaterialType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScbz(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCjsj(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUpdateDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setVoltageType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTerrainId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setBelongId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EquimentInstallType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EquimentInstallType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
