package com.hz.greendao.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.hz.greendao.dao.WireTypeDao;
import com.hz.greendao.dao.TransformerTypeDao;
import com.hz.greendao.dao.GeologicalConditionTypeDao;
import com.hz.greendao.dao.TowerTypeDao;
import com.hz.greendao.dao.EquimentInstallTypeDao;
import com.hz.greendao.dao.ElectricPoleTypeDao;
import com.hz.greendao.dao.ConductorWireEntityDao;
import com.hz.greendao.dao.ProjectEntityDao;
import com.hz.greendao.dao.MapPoiEntityDao;
import com.hz.greendao.dao.MapLineItemEntityDao;
import com.hz.greendao.dao.MapLineEntityDao;
import com.hz.greendao.dao.PointGalleryEntityDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 3): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        WireTypeDao.createTable(db, ifNotExists);
        TransformerTypeDao.createTable(db, ifNotExists);
        GeologicalConditionTypeDao.createTable(db, ifNotExists);
        TowerTypeDao.createTable(db, ifNotExists);
        EquimentInstallTypeDao.createTable(db, ifNotExists);
        ElectricPoleTypeDao.createTable(db, ifNotExists);
        ConductorWireEntityDao.createTable(db, ifNotExists);
        ProjectEntityDao.createTable(db, ifNotExists);
        MapPoiEntityDao.createTable(db, ifNotExists);
        MapLineItemEntityDao.createTable(db, ifNotExists);
        MapLineEntityDao.createTable(db, ifNotExists);
        PointGalleryEntityDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        WireTypeDao.dropTable(db, ifExists);
        TransformerTypeDao.dropTable(db, ifExists);
        GeologicalConditionTypeDao.dropTable(db, ifExists);
        TowerTypeDao.dropTable(db, ifExists);
        EquimentInstallTypeDao.dropTable(db, ifExists);
        ElectricPoleTypeDao.dropTable(db, ifExists);
        ConductorWireEntityDao.dropTable(db, ifExists);
        ProjectEntityDao.dropTable(db, ifExists);
        MapPoiEntityDao.dropTable(db, ifExists);
        MapLineItemEntityDao.dropTable(db, ifExists);
        MapLineEntityDao.dropTable(db, ifExists);
        PointGalleryEntityDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(WireTypeDao.class);
        registerDaoClass(TransformerTypeDao.class);
        registerDaoClass(GeologicalConditionTypeDao.class);
        registerDaoClass(TowerTypeDao.class);
        registerDaoClass(EquimentInstallTypeDao.class);
        registerDaoClass(ElectricPoleTypeDao.class);
        registerDaoClass(ConductorWireEntityDao.class);
        registerDaoClass(ProjectEntityDao.class);
        registerDaoClass(MapPoiEntityDao.class);
        registerDaoClass(MapLineItemEntityDao.class);
        registerDaoClass(MapLineEntityDao.class);
        registerDaoClass(PointGalleryEntityDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
